// Code generated by protoc-gen-defaults. DO NOT EDIT.

package example

import  "go.uber.org/zap/zapcore"








    type RightsUsersServer struct {
        example.UsersServer
        rightsCli rights.RightValidatorsClient
    }

    func init() {
        options = append(options, fx.Provide(NewRightsUsersClient))
    }

    type RightsUsersClientResult struct {
        fx.Out
        UsersClient example.AcceptancesClient `name:"r"`
    }

    func NewRightsUsersClient(c rights.RightValidatorsClient, s example.UsersServer) RightsUsersClientResult {
        return RightsUsersClientResult{ UsersClient: example.NewLocalUsersClient(NewRightsUsersServer(c, s))}
    }
    func NewRightsUsersServer(c rights.RightValidatorsClient, s example.UsersServer) example.UsersServer {
        return &RightsUsersServer{
            s,
            c,
        }
    }

    
        func (s *RightsUsersServer) AddUser(ctx context.Context, rightsvar *User) (Empty, error) {

            res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
                ResourcePath: fmt.Sprintf("/users/{user_id}/cards/",  rightsvar.GetUserId(),  ),
                Value:        2,
                UserId:       userinfo.FromContext(ctx).Id,
            })
            if err != nil {
                return nil, err
            }

            if !res.IsValid {
                return nil, status.Errorf(codes.PermissionDenied, res.Reason)
            }
            return s.UsersServer.AddUser(ctx, rightsvar)
        }

    
        func (s *RightsUsersServer) GetUser(ctx context.Context, rightsvar *GetUserReq) (User, error) {

            res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
                ResourcePath: fmt.Sprintf("/users/{user_id}/cards/{tent_id.tent}",  rightsvar.GetUserId(),  rightsvar.GetTentId().GetTent(),  ),
                Value:        1,
                UserId:       userinfo.FromContext(ctx).Id,
            })
            if err != nil {
                return nil, err
            }

            if !res.IsValid {
                return nil, status.Errorf(codes.PermissionDenied, res.Reason)
            }
            return s.UsersServer.GetUser(ctx, rightsvar)
        }

    


