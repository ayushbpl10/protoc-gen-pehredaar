// Code generated by protoc-gen-defaults. DO NOT EDIT.

package rightsval

import "fmt"
import "context"
import "google.golang.org/grpc/codes"
import "google.golang.org/grpc/status"
import "go.uber.org/fx"
import "go.appointy.com/google/pb/rights"
import "go.appointy.com/google/userinfo"

import "github.com/golang/protobuf/ptypes/empty"

import "github.com/ayushbpl10/protoc-gen-rights/example/example/pb"

type RightsUsersServer struct {
	pb.UsersServer
	rightsCli rights.RightValidatorsClient
}

func init() {
	options = append(options, fx.Provide(NewRightsUsersClient))
}

type RightsUsersClientResult struct {
	fx.Out
	UsersClient pb.AcceptancesClient `name:"r"`
}

func NewRightsUsersClient(c rights.RightValidatorsClient, s pb.UsersServer) RightsUsersClientResult {
	return RightsUsersClientResult{UsersClient: pb.NewLocalUsersClient(NewRightsUsersServer(c, s))}
}
func NewRightsUsersServer(c rights.RightValidatorsClient, s pb.UsersServer) pb.UsersServer {
	return &RightsUsersServer{
		s,
		c,
	}
}

func (s *RightsUsersServer) AddUser(ctx context.Context, rightsvar *pb.User) (*empty.Empty, error) {

	ResourcePathOR := make([]string, 0)
	ResourcePathAND := make([]string, 0)

	for _, Blocked := range rightsvar.GetBlocked() {

		ResourcePathAND = append(ResourcePathAND,

			fmt.Sprintf("/users/%s/cards.read/%s",

				rightsvar.GetId(),

				Blocked,
			),
		)

	}

	ResourcePathOR = append(ResourcePath,

		fmt.Sprintf("/users/%s/cards/user.write",

			rightsvar.GetId(),
		),
	)

	res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
		ResourcePathOR:  ResourcePath,
		ResourcePathAND: ResourcePathAND,
		UserId:          userinfo.FromContext(ctx).Id,
		ModuleName:      "Users",
	})
	if err != nil {
		return nil, err
	}

	if !res.IsValid {
		return nil, status.Errorf(codes.PermissionDenied, res.Reason)
	}
	return s.UsersServer.AddUser(ctx, rightsvar)
}

func (s *RightsUsersServer) GetUser(ctx context.Context, rightsvar *pb.GetUserReq) (*pb.User, error) {

	ResourcePathOR := make([]string, 0)
	ResourcePathAND := make([]string, 0)

	for _, UserEmail := range rightsvar.GetUserEmail() {

		for _, Checks := range UserEmail.GetChecks() {

			for _, CheckId := range Checks.GetCheckId() {

				ResourcePathAND = append(ResourcePathAND,

					fmt.Sprintf("/%s/users/%s/cards/%s/email/%s",

						UserEmail.GetEmail(),

						rightsvar.GetUserId(),

						rightsvar.GetTentId().GetTent(),

						Checks.GetCheck(),

						CheckId.GetValId(),
					),
				)

			}

		}

	}

	ResourcePathOR = append(ResourcePath,

		fmt.Sprintf("/users/%s/cards/%s/ex.write",

			rightsvar.GetUserId(),

			rightsvar.GetTentId().GetTent(),
		),
	)

	res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
		ResourcePathOR:  ResourcePath,
		ResourcePathAND: ResourcePathAND,
		UserId:          userinfo.FromContext(ctx).Id,
		ModuleName:      "Users",
	})
	if err != nil {
		return nil, err
	}

	if !res.IsValid {
		return nil, status.Errorf(codes.PermissionDenied, res.Reason)
	}
	return s.UsersServer.GetUser(ctx, rightsvar)
}

func (s *RightsUsersServer) UpdateUser(ctx context.Context, rightsvar *pb.UpdateUserReq) (*empty.Empty, error) {

	ResourcePathOR := make([]string, 0)
	ResourcePathAND := make([]string, 0)

	for _, EmailIds := range rightsvar.GetEmailIds() {

		for _, Emails := range EmailIds.GetEmails() {

			ResourcePathAND = append(ResourcePathAND,

				fmt.Sprintf("/users/%s/cards.read/",

					Emails,
				),
			)

		}

	}

	ResourcePathOR = append(ResourcePath,

		fmt.Sprintf("/users/%s/cards/user.write",

			rightsvar.GetId(),
		),
	)

	res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
		ResourcePathOR:  ResourcePath,
		ResourcePathAND: ResourcePathAND,
		UserId:          userinfo.FromContext(ctx).Id,
		ModuleName:      "Users",
	})
	if err != nil {
		return nil, err
	}

	if !res.IsValid {
		return nil, status.Errorf(codes.PermissionDenied, res.Reason)
	}
	return s.UsersServer.UpdateUser(ctx, rightsvar)
}
