{{- define "File" -}}
// Code generated by protoc-gen-defaults. DO NOT EDIT.

package rightsval

import "fmt"
import "context"
import "google.golang.org/grpc/codes"
import "google.golang.org/grpc/status"
import "go.uber.org/fx"
import "go.appointy.com/google/pb/rights"

{{ range .Imports }}
import "{{ .}}"
{{ end }}

{{ range $service := .Services }}



    type Rights{{$service.ServiceName}}Server struct {
        {{ .PackageName }}.{{$service.ServiceName}}Server
        rightsCli rights.RightValidatorsClient
    }

    func init() {
        options = append(options, fx.Provide(NewRights{{$service.ServiceName}}Client))
    }

    type Rights{{$service.ServiceName}}ClientResult struct {
        fx.Out
        {{$service.ServiceName}}Client {{ .PackageName }}.AcceptancesClient `name:"r"`
    }

    func NewRights{{$service.ServiceName}}Client(c rights.RightValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server) Rights{{$service.ServiceName}}ClientResult {
        return Rights{{$service.ServiceName}}ClientResult{ {{$service.ServiceName}}Client: {{ .PackageName }}.NewLocal{{$service.ServiceName}}Client(NewRights{{$service.ServiceName}}Server(c, s))}
    }
    func NewRights{{$service.ServiceName}}Server(c rights.RightValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server) {{ .PackageName }}.{{$service.ServiceName}}Server {
        return &Rights{{$service.ServiceName}}Server{
            s,
            c,
        }
    }

    {{ range $service.Rpcs }}
        func (s *Rights{{$service.ServiceName}}Server) {{.RpcName}}(ctx context.Context, rightsvar *{{ .PackageName }}.{{.Input}}) ({{if eq .Output "Empty"}}*empty.{{.Output}}{{else}}*{{ .PackageName }}.{{.Output}}{{end}}, error) {

            res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
                ResourcePath: fmt.Sprintf("{{.Option.Resource}}", {{ range .GetString}} rightsvar.{{.}}, {{end}} ),
                Value:        {{.Option.Right}},
                UserId:       userinfo.FromContext(ctx).Id,
            })
            if err != nil {
                return nil, err
            }

            if !res.IsValid {
                return nil, status.Errorf(codes.PermissionDenied, res.Reason)
            }
            return s.{{$service.ServiceName}}Server.{{.RpcName}}(ctx, rightsvar)
        }

    {{end}}
{{ end }}

{{end}}
