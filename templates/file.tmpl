{{- define "File" -}}
// Code generated by protoc-gen-defaults. DO NOT EDIT.

package {{ .PackageName }}

{{ range .Imports }}
import "{{ .}}"
{{ end }}


{{range $serviceIn := .Services}}
    var {{$serviceIn.ServiceName}}ResourcePaths = [...]string{
    {{range $rpcIn := $serviceIn.Rpcs}}
        {{range $resource := $rpcIn.Resources}}
            "{{$resource.ResourceStringWithCurlyBraces}}",
        {{end}}
    {{end}}
    }
{{end}}

{{ range $service := .Services }}



    type Rights{{$service.ServiceName}}Server struct {
        {{$service.ServiceName}}Server
        rightsCli rights.RightValidatorsClient
        user      user.UserIDer
    }

    func init() {
        pehredaar.Options = append(pehredaar.Options, fx.Provide(NewRights{{$service.ServiceName}}Client))
    }

    type Rights{{$service.ServiceName}}ClientResult struct {
        fx.Out
        {{$service.ServiceName}}Client {{$service.ServiceName}}Client `name:"r"`
    }

    func NewRights{{$service.ServiceName}}Client(c rights.RightValidatorsClient, s {{$service.ServiceName}}Server,u user.UserIDer) Rights{{$service.ServiceName}}ClientResult {
        return Rights{{$service.ServiceName}}ClientResult{ {{$service.ServiceName}}Client: NewLocal{{$service.ServiceName}}Client(NewRights{{$service.ServiceName}}Server(c, s, u))}
    }
    func NewRights{{$service.ServiceName}}Server(c rights.RightValidatorsClient, s {{$service.ServiceName}}Server, u user.UserIDer) {{$service.ServiceName}}Server {
        return &Rights{{$service.ServiceName}}Server{
            s,
            c,
            u,
        }
    }

    {{ range $rpc := $service.Rpcs }}
        func (s *Rights{{$service.ServiceName}}Server) {{$rpc.RPCName}}(ctx context.Context, rightsvar *{{$rpc.Input}}) ({{if eq $rpc.Output "Empty"}}*empty.{{$rpc.Output}}{{else}}*{{$rpc.Output}}{{end}}, error) {

            {{ if eq $rpc.Missing false}}

            ResourcePathOR := make([]string,0)
            ResourcePathAND := make([]string,0)

            {{range $resource := $rpc.Resources}}

                 {{if $resource.IsRepeated}}

                        {{ range $i,$forloop := $resource.ForLoop}}

                            for _, {{$forloop.ValueKey}} := range {{if eq $i 0}}rightsvar.{{end}}{{$forloop.RangeKey}}() {

                        {{ end }}

                        ResourcePathAND = append(ResourcePathAND,

                                                            fmt.Sprintf("{{$resource.ResourceStringWithFormatter}}",

                                                            {{ range $resource.GetStrings}}


                                                                {{range $getStrKey,$notincluderightsvar :=  .}}

                                                                    {{if eq $notincluderightsvar false}}rightsvar.{{end}}{{$getStrKey}},

                                                                {{end}}

                                                            {{end}} ),

                                                         )
                        {{ range $forloop := $resource.ForLoop}}

                            }
                        {{ end }}


                  {{ end }}

             {{ end }}

            ResourcePathOR = append(ResourcePathOR,

            {{range $resource := $rpc.Resources}}

                {{if eq $resource.IsRepeated false}}

                    fmt.Sprintf("{{$resource.ResourceStringWithFormatter}}",
                        {{ range $resource.GetStrings}}

                            {{range $getStrKey,$notincluderightsvar :=  .}}

                                {{if eq $notincluderightsvar false}}rightsvar.{{end}}{{$getStrKey}},

                            {{end}}

                        {{end}} ),

                {{end}}

            {{end}}

            )

            res, err := s.rightsCli.IsValid(ctx, &rights.IsValidReq{
                ResourcePathOr  :  ResourcePathOR,
                ResourcePathAnd :  ResourcePathAND,
                UserId          :  s.user.UserID(ctx),
                ModuleName      :  "{{$service.ServiceName}}",
            })
            if err != nil {
                return nil, err
            }


            if !res.IsValid {
                return nil, status.Errorf(codes.PermissionDenied, res.Reason)
            }

            {{end}}

            return s.{{$service.ServiceName}}Server.{{.RPCName}}(ctx, rightsvar)
        }

    {{end}}
{{ end }}

{{end}}
