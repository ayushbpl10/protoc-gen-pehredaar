// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/rights/rights.proto

package rights

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddRightReq struct {
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRightReq) Reset()         { *m = AddRightReq{} }
func (m *AddRightReq) String() string { return proto.CompactTextString(m) }
func (*AddRightReq) ProtoMessage()    {}
func (*AddRightReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4647dfcd9562693f, []int{0}
}

func (m *AddRightReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRightReq.Unmarshal(m, b)
}
func (m *AddRightReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRightReq.Marshal(b, m, deterministic)
}
func (m *AddRightReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRightReq.Merge(m, src)
}
func (m *AddRightReq) XXX_Size() int {
	return xxx_messageInfo_AddRightReq.Size(m)
}
func (m *AddRightReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRightReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddRightReq proto.InternalMessageInfo

func (m *AddRightReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type UserRight struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Allowed              []*Right `protobuf:"bytes,2,rep,name=allowed,proto3" json:"allowed,omitempty"`
	NotAllowed           []*Right `protobuf:"bytes,3,rep,name=not_allowed,json=notAllowed,proto3" json:"not_allowed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRight) Reset()         { *m = UserRight{} }
func (m *UserRight) String() string { return proto.CompactTextString(m) }
func (*UserRight) ProtoMessage()    {}
func (*UserRight) Descriptor() ([]byte, []int) {
	return fileDescriptor_4647dfcd9562693f, []int{1}
}

func (m *UserRight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRight.Unmarshal(m, b)
}
func (m *UserRight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRight.Marshal(b, m, deterministic)
}
func (m *UserRight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRight.Merge(m, src)
}
func (m *UserRight) XXX_Size() int {
	return xxx_messageInfo_UserRight.Size(m)
}
func (m *UserRight) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRight.DiscardUnknown(m)
}

var xxx_messageInfo_UserRight proto.InternalMessageInfo

func (m *UserRight) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserRight) GetAllowed() []*Right {
	if m != nil {
		return m.Allowed
	}
	return nil
}

func (m *UserRight) GetNotAllowed() []*Right {
	if m != nil {
		return m.NotAllowed
	}
	return nil
}

type Right struct {
	Resource             string   `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Values               []int32  `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	Module               string   `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Right) Reset()         { *m = Right{} }
func (m *Right) String() string { return proto.CompactTextString(m) }
func (*Right) ProtoMessage()    {}
func (*Right) Descriptor() ([]byte, []int) {
	return fileDescriptor_4647dfcd9562693f, []int{2}
}

func (m *Right) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Right.Unmarshal(m, b)
}
func (m *Right) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Right.Marshal(b, m, deterministic)
}
func (m *Right) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Right.Merge(m, src)
}
func (m *Right) XXX_Size() int {
	return xxx_messageInfo_Right.Size(m)
}
func (m *Right) XXX_DiscardUnknown() {
	xxx_messageInfo_Right.DiscardUnknown(m)
}

var xxx_messageInfo_Right proto.InternalMessageInfo

func (m *Right) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Right) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Right) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

type GetRightReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRightReq) Reset()         { *m = GetRightReq{} }
func (m *GetRightReq) String() string { return proto.CompactTextString(m) }
func (*GetRightReq) ProtoMessage()    {}
func (*GetRightReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4647dfcd9562693f, []int{3}
}

func (m *GetRightReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRightReq.Unmarshal(m, b)
}
func (m *GetRightReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRightReq.Marshal(b, m, deterministic)
}
func (m *GetRightReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRightReq.Merge(m, src)
}
func (m *GetRightReq) XXX_Size() int {
	return xxx_messageInfo_GetRightReq.Size(m)
}
func (m *GetRightReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRightReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRightReq proto.InternalMessageInfo

func (m *GetRightReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type IsValidRes struct {
	IsValid              bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsValidRes) Reset()         { *m = IsValidRes{} }
func (m *IsValidRes) String() string { return proto.CompactTextString(m) }
func (*IsValidRes) ProtoMessage()    {}
func (*IsValidRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_4647dfcd9562693f, []int{4}
}

func (m *IsValidRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsValidRes.Unmarshal(m, b)
}
func (m *IsValidRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsValidRes.Marshal(b, m, deterministic)
}
func (m *IsValidRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsValidRes.Merge(m, src)
}
func (m *IsValidRes) XXX_Size() int {
	return xxx_messageInfo_IsValidRes.Size(m)
}
func (m *IsValidRes) XXX_DiscardUnknown() {
	xxx_messageInfo_IsValidRes.DiscardUnknown(m)
}

var xxx_messageInfo_IsValidRes proto.InternalMessageInfo

func (m *IsValidRes) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *IsValidRes) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type IsValidReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ResourcePathOr       []string `protobuf:"bytes,2,rep,name=resource_path_or,json=resourcePathOr,proto3" json:"resource_path_or,omitempty"`
	ResourcePathAnd      []string `protobuf:"bytes,3,rep,name=resource_path_and,json=resourcePathAnd,proto3" json:"resource_path_and,omitempty"`
	ModuleName           string   `protobuf:"bytes,4,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsValidReq) Reset()         { *m = IsValidReq{} }
func (m *IsValidReq) String() string { return proto.CompactTextString(m) }
func (*IsValidReq) ProtoMessage()    {}
func (*IsValidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4647dfcd9562693f, []int{5}
}

func (m *IsValidReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsValidReq.Unmarshal(m, b)
}
func (m *IsValidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsValidReq.Marshal(b, m, deterministic)
}
func (m *IsValidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsValidReq.Merge(m, src)
}
func (m *IsValidReq) XXX_Size() int {
	return xxx_messageInfo_IsValidReq.Size(m)
}
func (m *IsValidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsValidReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsValidReq proto.InternalMessageInfo

func (m *IsValidReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *IsValidReq) GetResourcePathOr() []string {
	if m != nil {
		return m.ResourcePathOr
	}
	return nil
}

func (m *IsValidReq) GetResourcePathAnd() []string {
	if m != nil {
		return m.ResourcePathAnd
	}
	return nil
}

func (m *IsValidReq) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func init() {
	proto.RegisterType((*AddRightReq)(nil), "rights.AddRightReq")
	proto.RegisterType((*UserRight)(nil), "rights.UserRight")
	proto.RegisterType((*Right)(nil), "rights.Right")
	proto.RegisterType((*GetRightReq)(nil), "rights.GetRightReq")
	proto.RegisterType((*IsValidRes)(nil), "rights.IsValidRes")
	proto.RegisterType((*IsValidReq)(nil), "rights.IsValidReq")
}

func init() { proto.RegisterFile("src/rights/rights.proto", fileDescriptor_4647dfcd9562693f) }

var fileDescriptor_4647dfcd9562693f = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x4f, 0xe3, 0x30,
	0x14, 0x6c, 0xb7, 0xdb, 0x7c, 0xbc, 0x68, 0xb7, 0xdb, 0xb7, 0x12, 0x2d, 0xbd, 0x80, 0x72, 0x80,
	0x8a, 0x43, 0x91, 0x5a, 0xee, 0xa8, 0x1c, 0x40, 0xbd, 0x00, 0x32, 0x82, 0x03, 0x97, 0xc8, 0x34,
	0x16, 0x8d, 0x94, 0xc6, 0xc5, 0x76, 0xca, 0x89, 0x7f, 0xc2, 0x8f, 0x45, 0xb6, 0xe3, 0x36, 0x15,
	0xe5, 0x94, 0xcc, 0xf3, 0xbc, 0x4c, 0x66, 0x3c, 0xd0, 0x93, 0x62, 0x7e, 0x2e, 0xb2, 0xd7, 0x85,
	0x92, 0xd5, 0x63, 0xb4, 0x12, 0x5c, 0x71, 0xf4, 0x2c, 0x8a, 0x4f, 0x20, 0x9a, 0xa6, 0x29, 0xd1,
	0x80, 0xb0, 0x37, 0xec, 0x81, 0x5f, 0x4a, 0x26, 0x92, 0x2c, 0xed, 0xff, 0x3a, 0x6e, 0x0e, 0x43,
	0xe2, 0x69, 0x38, 0x4b, 0xe3, 0x0f, 0x08, 0x1f, 0x25, 0x13, 0x86, 0x58, 0x67, 0x35, 0xeb, 0x2c,
	0x3c, 0x05, 0x9f, 0xe6, 0x39, 0x7f, 0x67, 0x7a, 0xbd, 0x35, 0x8c, 0xc6, 0x7f, 0x46, 0x95, 0xaa,
	0x55, 0x70, 0xa7, 0x38, 0x82, 0xa8, 0xe0, 0x2a, 0x71, 0xe4, 0xd6, 0x3e, 0x32, 0x14, 0x5c, 0x4d,
	0x2d, 0x21, 0x7e, 0x80, 0xb6, 0x95, 0x1e, 0x40, 0x20, 0x98, 0xe4, 0xa5, 0x98, 0xb3, 0x4a, 0x7b,
	0x83, 0xf1, 0x00, 0xbc, 0x35, 0xcd, 0x4b, 0x26, 0x8d, 0x78, 0x9b, 0x54, 0x48, 0xcf, 0x97, 0x3c,
	0x2d, 0x73, 0xd6, 0x6f, 0xd9, 0xbf, 0xb5, 0x48, 0x7b, 0xbf, 0x61, 0x6a, 0x9f, 0xf7, 0x1d, 0x57,
	0xf1, 0x25, 0xc0, 0x4c, 0x3e, 0xd1, 0x3c, 0x4b, 0x09, 0x93, 0x78, 0x08, 0x41, 0x26, 0x93, 0xb5,
	0x86, 0x86, 0x17, 0x10, 0x3f, 0xb3, 0xa7, 0x5a, 0x48, 0x30, 0x2a, 0x79, 0xe1, 0xc2, 0xb3, 0x28,
	0xfe, 0x6c, 0xd6, 0xbe, 0xf0, 0xb3, 0x10, 0x0e, 0xe1, 0x9f, 0x33, 0x93, 0xac, 0xa8, 0x5a, 0x24,
	0x5c, 0x18, 0x2b, 0x21, 0xf9, 0xeb, 0xe6, 0xf7, 0x54, 0x2d, 0xee, 0x04, 0x9e, 0x41, 0x77, 0x97,
	0x49, 0x0b, 0x9b, 0x62, 0x48, 0x3a, 0x75, 0xea, 0xb4, 0x48, 0xf1, 0x08, 0x22, 0x6b, 0x38, 0x29,
	0xe8, 0x92, 0xf5, 0x7f, 0x1b, 0x49, 0xb0, 0xa3, 0x5b, 0xba, 0x64, 0x63, 0x05, 0x9e, 0x09, 0x41,
	0xe2, 0x05, 0x04, 0xae, 0x0d, 0xf8, 0xdf, 0xdd, 0x46, 0xad, 0x1f, 0x83, 0xae, 0x1b, 0x6e, 0xca,
	0x10, 0x37, 0xf4, 0x96, 0xcb, 0x71, 0xbb, 0x55, 0x4b, 0x76, 0xef, 0xd6, 0xf8, 0x1a, 0x3a, 0xe6,
	0xd5, 0xc4, 0x42, 0x15, 0x17, 0x12, 0x27, 0xe0, 0x57, 0x31, 0x21, 0xba, 0x95, 0x6d, 0x6e, 0x83,
	0xef, 0x33, 0x19, 0x37, 0xae, 0x82, 0xe7, 0xaa, 0xcb, 0x2f, 0x9e, 0xa9, 0xf6, 0xe4, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x87, 0x59, 0xf7, 0x8c, 0xf5, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RightsClient is the client API for Rights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RightsClient interface {
	AddRight(ctx context.Context, in *AddRightReq, opts ...grpc.CallOption) (*UserRight, error)
	// GetRights can be used to get rights of a specific user.
	GetRight(ctx context.Context, in *GetRightReq, opts ...grpc.CallOption) (*UserRight, error)
}

type rightsClient struct {
	cc *grpc.ClientConn
}

func NewRightsClient(cc *grpc.ClientConn) RightsClient {
	return &rightsClient{cc}
}

func (c *rightsClient) AddRight(ctx context.Context, in *AddRightReq, opts ...grpc.CallOption) (*UserRight, error) {
	out := new(UserRight)
	err := c.cc.Invoke(ctx, "/rights.Rights/AddRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightsClient) GetRight(ctx context.Context, in *GetRightReq, opts ...grpc.CallOption) (*UserRight, error) {
	out := new(UserRight)
	err := c.cc.Invoke(ctx, "/rights.Rights/GetRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RightsServer is the server API for Rights service.
type RightsServer interface {
	AddRight(context.Context, *AddRightReq) (*UserRight, error)
	// GetRights can be used to get rights of a specific user.
	GetRight(context.Context, *GetRightReq) (*UserRight, error)
}

func RegisterRightsServer(s *grpc.Server, srv RightsServer) {
	s.RegisterService(&_Rights_serviceDesc, srv)
}

func _Rights_AddRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightsServer).AddRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rights.Rights/AddRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightsServer).AddRight(ctx, req.(*AddRightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rights_GetRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightsServer).GetRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rights.Rights/GetRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightsServer).GetRight(ctx, req.(*GetRightReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rights.Rights",
	HandlerType: (*RightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRight",
			Handler:    _Rights_AddRight_Handler,
		},
		{
			MethodName: "GetRight",
			Handler:    _Rights_GetRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/rights/rights.proto",
}

// RightValidatorsClient is the client API for RightValidators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RightValidatorsClient interface {
	IsValid(ctx context.Context, in *IsValidReq, opts ...grpc.CallOption) (*IsValidRes, error)
}

type rightValidatorsClient struct {
	cc *grpc.ClientConn
}

func NewRightValidatorsClient(cc *grpc.ClientConn) RightValidatorsClient {
	return &rightValidatorsClient{cc}
}

func (c *rightValidatorsClient) IsValid(ctx context.Context, in *IsValidReq, opts ...grpc.CallOption) (*IsValidRes, error) {
	out := new(IsValidRes)
	err := c.cc.Invoke(ctx, "/rights.RightValidators/IsValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RightValidatorsServer is the server API for RightValidators service.
type RightValidatorsServer interface {
	IsValid(context.Context, *IsValidReq) (*IsValidRes, error)
}

func RegisterRightValidatorsServer(s *grpc.Server, srv RightValidatorsServer) {
	s.RegisterService(&_RightValidators_serviceDesc, srv)
}

func _RightValidators_IsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightValidatorsServer).IsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rights.RightValidators/IsValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightValidatorsServer).IsValid(ctx, req.(*IsValidReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RightValidators_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rights.RightValidators",
	HandlerType: (*RightValidatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsValid",
			Handler:    _RightValidators_IsValid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/rights/rights.proto",
}
